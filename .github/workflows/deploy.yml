name: Deploy to EC2  # 이 워크플로우의 이름. GitHub Actions 탭에 표시됨

on:
  push:
    branches: [ "main" ]  # main 브랜치에 push될 때만 이 워크플로우가 실행됨

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 사용하는 가상 머신 환경
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Build, Login & Push Docker image
        run: |
          IMAGE_URI=${{ secrets.ECR_REPOSITORY }}:latest

          # 1. AWS CLI로 ECR 로그인
          aws ecr get-login-password \
            --region ${{ env.AWS_REGION }} \
            | docker login \
                --username AWS \
                --password-stdin ${{ secrets.ECR_REPOSITORY }}

          # 2. Docker 이미지 빌드
          docker build -t $IMAGE_URI .

          # 3. ECR에 이미지 푸시
          docker push $IMAGE_URI

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}      # ex: ec2-user@13.124.xxx.xxx
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
            docker pull ${{ secrets.ECR_REPOSITORY }}:latest
            docker stop app   || true
            docker rm app     || true
            docker run -d --name app -p 8080:8080 ${{ secrets.ECR_REPOSITORY }}:latest
